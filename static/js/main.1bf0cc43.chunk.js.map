{"version":3,"sources":["components/Cards/Cards.module.css","components/Header/Header.js","api/index.js","components/DatePicker/DatePicker.js","components/Cards/Cards.js","components/Chart/Chart.js","components/Chips/Chips.js","App.js","serviceWorker.js","index.js","components/DatePicker/DatePicker.module.css","components/Header/Header.module.css","components/Chart/Chart.module.css","components/Chips/Chips.module.css","App.module.css"],"names":["module","exports","Header","className","styles","header","fetchPropertyData","a","axios","get","data","console","log","DatePicker","handleDateChange","useState","dates","setDates","useEffect","Object","entries","key","push","slice","reverse","fetchAPI","FormControl","form","NativeSelect","selector","defaultValue","onChange","e","date","target","value","variant","map","i","Cards","currentDate","numListings","setNumListings","avgPrice","setAvgPrice","avgSqm","setAvgSqm","current","keys","length","today","number","reduce","acc","place","averagePrice","avg","container","Grid","spacing","justify","gridwidth","item","xs","md","component","Card","cx","card","CardContent","Typography","color","gutterBottom","start","end","duration","separator","price","average","Chart","currentLocation","arrayOfNumbers","dateData","obj","JSON","stringify","chart","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","locationChart","Chips","handleLocationChange","locations","setLocations","locs","filter","loc","active","inputProps","onClick","l","location","Chip","App","setCurrentDate","setCurrentLocation","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1bf0cc43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cards_card__eGUfZ\",\"container\":\"Cards_container__3bjn6\",\"number\":\"Cards_number__eJ48I\",\"price\":\"Cards_price__3oVby\",\"average\":\"Cards_average__20-vg\",\"gridwidth\":\"Cards_gridwidth__2pFYe\"};","import React from 'react';\n\nimport styles from \"./Header.module.css\";\n\nexport const Header = () => {\n    return (\n        <>\n            <h2 className={styles.header}>Boligpriser</h2>\n        </>\n    )\n}\n\n","import axios from 'axios';\n\nconst url = \"https://raw.githubusercontent.com/henrikig/property_prices/master/price_history.json\"\n\nexport const fetchPropertyData = async () => {\n    try {\n        const data = await axios.get(url);\n\n        return data;\n    } catch (err) {\n        console.log(err);\n        return err;\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { FormControl, NativeSelect } from '@material-ui/core';\n\nimport styles from './DatePicker.module.css';\nimport { fetchPropertyData } from '../../api';\n\nexport const DatePicker = ({ handleDateChange }) => {\n    const [dates, setDates] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            try {\n                const { data } = await fetchPropertyData();\n                let dates = []\n                for (let [key] of Object.entries(data)) {\n                    dates.push(key);\n                }\n                \n                setDates(dates.slice(-30).reverse());\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchAPI();\n    }, [])\n\n    const handleChange = (date) => {\n        handleDateChange(date);\n    }\n\n    return (\n        <FormControl className={styles.form}>\n            <NativeSelect\n                className={styles.selector}\n                defaultValue=\"\"\n                onChange={(e) => handleChange(e.target.value)}\n                variant=\"filled\"\n            >\n            <option value=\"\">Utvikling siste 30 dager...</option>\n            {dates.map((date, i) => <option key={i} value={date}>{date}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n","import React, { useState } from 'react';\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\nimport cx from 'classnames';\nimport CountUp from 'react-countup';\n\nimport styles from './Cards.module.css';\n\nexport const Cards = ({ data, currentDate }) => {\n    const [numListings, setNumListings] = useState(0);\n    const [avgPrice, setAvgPrice] = useState(0);\n    const [avgSqm, setAvgSqm] = useState(0);\n\n    const current = currentDate || Object.keys(data).slice(-1)[0];\n\n    if(Object.keys(data).length > 0) {\n        const today = data[current];\n        const number = Object.keys(today).reduce((acc, place) => acc + (today[place][2] || 0), 0);\n        if(number !== numListings) {\n            setNumListings(number);\n        }\n        \n        const averagePrice = today[\"Gjennomsnittspris\"];\n        if(averagePrice !== avgPrice){\n            setAvgPrice(averagePrice);\n        }\n\n        const totalSqm = Object.keys(today).reduce((acc, place) => acc + (today[place][1] || 0), 0);\n        const avg = totalSqm / number;\n        if(avg !== avgSqm) {\n            setAvgSqm(avg);\n        }\n\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\" className={styles.gridwidth}>\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.number)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>\n                            Pris\n                        </Typography>\n                        <Typography variant=\"h4\" component=\"h3\">\n                            <CountUp start={0} end={avgPrice} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {current}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Gjennomsnittlig pris per kvadratmeter.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.price)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>\n                            Størrelse\n                        </Typography>\n                        <Typography variant=\"h4\" component=\"h6\">\n                            <CountUp start={0} end={avgSqm} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {current}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Gjennomsnittlig størrelse på boliger.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.average)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>\n                            Antall annonser\n                        </Typography>\n                        <Typography variant=\"h4\" component=\"h3\">\n                            <CountUp start={0} end={numListings} duration={2.75} separator=\",\" />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {current}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            Antall boliger på oppgitt dato.\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nexport const Chart = ({ data, currentDate, currentLocation }) => {\n    const [numListings, setNumListings] = useState([]);\n    let dates = []\n    \n    if(data){\n        for(let [key] of Object.entries(data)){\n            dates.push(key);\n        }\n        dates = dates.slice(-30)\n        \n        const arrayOfData = Object.keys(data).map(dateData => data[dateData]);\n        const arrayOfNumbers = arrayOfData.map(obj => Object.keys(obj).reduce((acc, place) => acc + (obj[place][2] || 0), 0));\n        if(JSON.stringify(arrayOfNumbers) !== JSON.stringify(numListings)){\n            setNumListings(arrayOfNumbers);\n        }\n    }\n\n    if(currentDate){\n        console.log(\"BAR\", Object.keys(data[currentDate]).slice(0,13).map(place => data[currentDate][place][3]));\n    }\n\n    const lineChart = (\n        data ? (\n            <Line data={{\n                labels: dates,\n                datasets: [{\n                    data: Object.keys(data).map((date) => data[date][\"Gjennomsnittspris\"]),\n                    label: 'Pris',\n                    borderColor: '#1e88e5',\n                    fill: true,\n                    backgroundColor: \"rgba(30,136,229, 0.1)\"\n                  },\n                  {\n                    data: numListings,\n                    label: 'Antall boliger',\n                    borderColor: '#8e24aa',\n                    fill: true,\n                    backgroundColor: \"rgba(142,36,170, 0.3)\"  \n                  },\n                  {\n                    data: Object.keys(data).map(date => data[date][\"Ny i dag\"][3]),\n                    label: 'Nye siste døgnet',\n                    borderColor: '#00897b',\n                    fill: true,\n                    backgroundColor: \"rgba(0, 137, 123, 0.1)\"  \n                  }\n                ],\n                \n            }}/>\n\n            \n        ) : null\n    );\n\n    const barChart = (\n        currentDate ? (\n            <Bar\n                data={{\n                labels: Object.keys(data[currentDate]),\n                datasets: [\n                    {\n                    label: 'Pris',\n                    backgroundColor: ['rgba(229,57,53,0.5)', 'rgba(216,27,96, 0.5)', 'rgba(142,36,170,0.5)',\n                                        'rgba(103,58,183,0.5)', 'rgba(33,150,243, 0.5)', 'rgba(0,188,212, 0.5)',\n                                        'rgba(0,150,136, 0.5)', 'rgba(76,175,80, 0.5)', 'rgba(139,195,74, 0.5)',\n                                        'rgba(255,235,59, 0.5)', 'rgba(255,152,0, 0.5)', 'rgba(255,87,34, 0.5)', 'rgba(96,125,139, 0.5)'],\n                    data: Object.keys(data[currentDate]).map(place => (data[currentDate][place][3] || data[currentDate][place])),\n                    },\n                ],\n                }}\n                options={{\n                legend: { display: false },\n                title: { display: true, text: `Priser per ${currentDate}` },\n                }}\n            />\n        ) : null\n    );\n\n    const locationChart = (\n        currentLocation ? (\n            <Line data={{\n                labels: dates,\n                datasets: [{\n                    data: Object.keys(data).map(date => (data[date][currentLocation][3] || data[date][currentLocation])),\n                    label: `Prisutvikling ${currentLocation}`,\n                    borderColor: '#1e88e5',\n                    fill: true,\n                    backgroundColor: \"rgba(30,136,229, 0.1)\"\n                  },\n                ],\n                \n            }}/>\n        ) : null\n    );\n\n    let chart;\n    if(currentLocation){\n        chart = locationChart;\n    } else if(currentDate){\n        chart = barChart;\n    } else {\n        chart = lineChart;\n    }\n\n    return (\n        <div className={styles.container}>\n            {chart}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Chip } from '@material-ui/core';\n\n\nimport styles from './Chips.module.css';\nimport { fetchPropertyData } from '../../api';\n\nexport const Chips = ({ handleLocationChange, currentLocation }) => {\n    const [locations, setLocations] = useState(\"\");\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            try {\n                const { data } = await fetchPropertyData();\n                const today = Object.keys(data).slice(-1);\n                const locs = Object.keys(data[today])\n                .filter((loc) => loc !== \"Gjennomsnittspris\")\n                .map((loc, i) => {\n                    return {\n                        key: i, \n                        label: loc, \n                        active: false\n                    }\n                });\n                \n                setLocations(locs);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        fetchAPI();\n    }, [])\n\n    const handleClick = (location) => {\n        handleLocationChange(location);\n    }\n\n    const locs = (\n        locations ? (\n            <ul>\n                {locations.map((loc) => {     \n                    const inputProps = {\n                        label: loc.label,\n                        onClick: (l) => handleClick(loc.label)\n                    }\n                    if(loc.label === currentLocation){\n                        inputProps.color=\"primary\"\n                    }           \n                    return (\n                        <li key={loc.key}>\n                            <Chip\n                                {...inputProps}\n                            />\n                        </li>\n                    );\n                })}\n            </ul>\n        ) : null\n    )    \n\n    return (\n        <div className={styles.locations}>\n            {locs}\n        </div>\n    )\n}\n","import React, { useState, useEffect} from 'react';\nimport { Cards, Header, DatePicker, Chart, Chips } from \"./components\";\nimport { fetchPropertyData } from './api/';\n\nimport styles from './App.module.css';\n\nfunction App() {\n  const [dates, setDates] = useState({});\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [currentLocation, setCurrentLocation] = useState(\"\");\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      const { data } = await fetchPropertyData();\n\n      setDates(data);\n    }\n\n    fetchAPI();\n  }, [])\n\n  const handleDateChange = (date) => {\n    setCurrentDate(date);\n    setCurrentLocation(\"\");\n  }\n\n  const handleLocationChange = (location) => {\n    if(location===currentLocation){\n      setCurrentLocation(\"\");\n    } else {\n      setCurrentLocation(location);\n    }\n  }\n  \n  return (\n    <div className={styles.container}>\n      <Header />\n      <Cards data={dates} currentDate={currentDate}/>\n      <DatePicker handleDateChange={handleDateChange}/>\n      <Chart data={dates} currentDate={currentDate} currentLocation={currentLocation}/>\n      <Chips data={dates} currentLocation={currentLocation} handleLocationChange={handleLocationChange}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selector\":\"DatePicker_selector__2Ci73\",\"form\":\"DatePicker_form__1vM1f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locations\":\"Chips_locations__24yhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}